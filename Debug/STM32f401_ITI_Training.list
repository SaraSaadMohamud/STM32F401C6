
STM32f401_ITI_Training.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ec8  08008194  08008194  00008194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800905c  0800905c  000100ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800905c  0800905c  000100ac  2**0
                  CONTENTS
  4 .ARM          00000000  0800905c  0800905c  000100ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800905c  0800905c  000100ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800905c  0800905c  0000905c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009060  08009060  00009060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08009064  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  200000ac  08009110  000100ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08009110  00010110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000100ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002a11  00000000  00000000  000100dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008fc  00000000  00000000  00012aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000300  00000000  00000000  000133f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000288  00000000  00000000  000136f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000007fa  00000000  00000000  00013978  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001e7b  00000000  00000000  00014172  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c401  00000000  00000000  00015fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000223ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a58  00000000  00000000  0002246c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008194 <__do_global_dtors_aux>:
 8008194:	b510      	push	{r4, lr}
 8008196:	4c05      	ldr	r4, [pc, #20]	; (80081ac <__do_global_dtors_aux+0x18>)
 8008198:	7823      	ldrb	r3, [r4, #0]
 800819a:	b933      	cbnz	r3, 80081aa <__do_global_dtors_aux+0x16>
 800819c:	4b04      	ldr	r3, [pc, #16]	; (80081b0 <__do_global_dtors_aux+0x1c>)
 800819e:	b113      	cbz	r3, 80081a6 <__do_global_dtors_aux+0x12>
 80081a0:	4804      	ldr	r0, [pc, #16]	; (80081b4 <__do_global_dtors_aux+0x20>)
 80081a2:	f3af 8000 	nop.w
 80081a6:	2301      	movs	r3, #1
 80081a8:	7023      	strb	r3, [r4, #0]
 80081aa:	bd10      	pop	{r4, pc}
 80081ac:	200000ac 	.word	0x200000ac
 80081b0:	00000000 	.word	0x00000000
 80081b4:	08009044 	.word	0x08009044

080081b8 <frame_dummy>:
 80081b8:	b508      	push	{r3, lr}
 80081ba:	4b03      	ldr	r3, [pc, #12]	; (80081c8 <frame_dummy+0x10>)
 80081bc:	b11b      	cbz	r3, 80081c6 <frame_dummy+0xe>
 80081be:	4903      	ldr	r1, [pc, #12]	; (80081cc <frame_dummy+0x14>)
 80081c0:	4803      	ldr	r0, [pc, #12]	; (80081d0 <frame_dummy+0x18>)
 80081c2:	f3af 8000 	nop.w
 80081c6:	bd08      	pop	{r3, pc}
 80081c8:	00000000 	.word	0x00000000
 80081cc:	200000b0 	.word	0x200000b0
 80081d0:	08009044 	.word	0x08009044

080081d4 <BUZZER_INTIATIAZE>:

#include <ECUAL/BUZZER/BUZZER_interface.h>


STD_RETURN_TYPES BUZZER_INTIATIAZE(pin_cfg *ptr)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
    STD_RETURN_TYPES RET =E_OK;
 80081dc:	2301      	movs	r3, #1
 80081de:	60fb      	str	r3, [r7, #12]

    if(NULL == ptr)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d102      	bne.n	80081ec <BUZZER_INTIATIAZE+0x18>
    {
        RET = E_NOK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	60fb      	str	r3, [r7, #12]
 80081ea:	e025      	b.n	8008238 <BUZZER_INTIATIAZE+0x64>
    }
    else
    {
        if((ptr->port) == GPIO_PORTH)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	2b05      	cmp	r3, #5
 80081f2:	d105      	bne.n	8008200 <BUZZER_INTIATIAZE+0x2c>
        {
     	   RET =  RCC_PERIPHERAL_ENABLE(AHB1, GPIOH_PERIPHERAL);
 80081f4:	2107      	movs	r1, #7
 80081f6:	2000      	movs	r0, #0
 80081f8:	f000 fc06 	bl	8008a08 <RCC_PERIPHERAL_ENABLE>
 80081fc:	60f8      	str	r0, [r7, #12]
 80081fe:	e006      	b.n	800820e <BUZZER_INTIATIAZE+0x3a>
        }
        else
        {
     	   RET =  RCC_PERIPHERAL_ENABLE(AHB1, ptr->port);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	4619      	mov	r1, r3
 8008206:	2000      	movs	r0, #0
 8008208:	f000 fbfe 	bl	8008a08 <RCC_PERIPHERAL_ENABLE>
 800820c:	60f8      	str	r0, [r7, #12]
        }

        RET =  GPIO_PIN_SET_MODE(ptr);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f8ac 	bl	800836c <GPIO_PIN_SET_MODE>
 8008214:	60f8      	str	r0, [r7, #12]
        RET =  GPIO_PIN_SET_OUTPUT_TYPE(ptr);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f98c 	bl	8008534 <GPIO_PIN_SET_OUTPUT_TYPE>
 800821c:	60f8      	str	r0, [r7, #12]
        RET =  GPIO_PIN_SET_OUTPUT_SPEED(ptr);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f9d4 	bl	80085cc <GPIO_PIN_SET_OUTPUT_SPEED>
 8008224:	60f8      	str	r0, [r7, #12]
        RET =  GPIO_PIN_SET_PULL_TYPE(ptr);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fab4 	bl	8008794 <GPIO_PIN_SET_PULL_TYPE>
 800822c:	60f8      	str	r0, [r7, #12]
        RET = GPIO_PIN_GET_PIN_LOGIC(ptr, GPIO_LOW);
 800822e:	2100      	movs	r1, #0
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fb5f 	bl	80088f4 <GPIO_PIN_GET_PIN_LOGIC>
 8008236:	60f8      	str	r0, [r7, #12]
    }
    return(RET);
 8008238:	68fb      	ldr	r3, [r7, #12]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <BUZZER_TURN_ON>:
STD_RETURN_TYPES BUZZER_TURN_ON(pin_cfg *ptr)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b084      	sub	sp, #16
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
    STD_RETURN_TYPES RET =E_OK;
 800824a:	2301      	movs	r3, #1
 800824c:	60fb      	str	r3, [r7, #12]
    if(NULL == ptr)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d102      	bne.n	800825a <BUZZER_TURN_ON+0x18>
    {
        RET = E_NOK;
 8008254:	2300      	movs	r3, #0
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	e004      	b.n	8008264 <BUZZER_TURN_ON+0x22>
    }
    else
    {
        RET = GPIO_PIN_SET_PIN_LOGIC(ptr, GPIO_HIGH);
 800825a:	2101      	movs	r1, #1
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fb77 	bl	8008950 <GPIO_PIN_SET_PIN_LOGIC>
 8008262:	60f8      	str	r0, [r7, #12]
    }
    return(RET);
 8008264:	68fb      	ldr	r3, [r7, #12]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <LED_INTIALIZE>:

#include "ECUAL/LED/LED_interface.h"


 STD_RETURN_TYPES LED_INTIALIZE(pin_cfg *ptr)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b084      	sub	sp, #16
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
	 STD_RETURN_TYPES RET = E_OK;
 8008276:	2301      	movs	r3, #1
 8008278:	60fb      	str	r3, [r7, #12]
    if(ptr == NULL)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d102      	bne.n	8008286 <LED_INTIALIZE+0x18>
    {
        RET = E_NOK;
 8008280:	2300      	movs	r3, #0
 8008282:	60fb      	str	r3, [r7, #12]
 8008284:	e025      	b.n	80082d2 <LED_INTIALIZE+0x64>
    }
    else
    {
       if((ptr->port) == GPIO_PORTH)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	2b05      	cmp	r3, #5
 800828c:	d105      	bne.n	800829a <LED_INTIALIZE+0x2c>
       {
    	   RET =  RCC_PERIPHERAL_ENABLE(AHB1, GPIOH_PERIPHERAL);
 800828e:	2107      	movs	r1, #7
 8008290:	2000      	movs	r0, #0
 8008292:	f000 fbb9 	bl	8008a08 <RCC_PERIPHERAL_ENABLE>
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	e006      	b.n	80082a8 <LED_INTIALIZE+0x3a>
       }
       else
       {
    	   RET =  RCC_PERIPHERAL_ENABLE(AHB1, ptr->port);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	4619      	mov	r1, r3
 80082a0:	2000      	movs	r0, #0
 80082a2:	f000 fbb1 	bl	8008a08 <RCC_PERIPHERAL_ENABLE>
 80082a6:	60f8      	str	r0, [r7, #12]
       }

       RET =  GPIO_PIN_SET_MODE(ptr);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f85f 	bl	800836c <GPIO_PIN_SET_MODE>
 80082ae:	60f8      	str	r0, [r7, #12]
       RET =  GPIO_PIN_SET_OUTPUT_TYPE(ptr);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f93f 	bl	8008534 <GPIO_PIN_SET_OUTPUT_TYPE>
 80082b6:	60f8      	str	r0, [r7, #12]
       RET =  GPIO_PIN_SET_OUTPUT_SPEED(ptr);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f987 	bl	80085cc <GPIO_PIN_SET_OUTPUT_SPEED>
 80082be:	60f8      	str	r0, [r7, #12]
       RET =  GPIO_PIN_SET_PULL_TYPE(ptr);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fa67 	bl	8008794 <GPIO_PIN_SET_PULL_TYPE>
 80082c6:	60f8      	str	r0, [r7, #12]
       RET = GPIO_PIN_GET_PIN_LOGIC(ptr, GPIO_LOW);
 80082c8:	2100      	movs	r1, #0
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fb12 	bl	80088f4 <GPIO_PIN_GET_PIN_LOGIC>
 80082d0:	60f8      	str	r0, [r7, #12]
    }

    return(RET);
 80082d2:	68fb      	ldr	r3, [r7, #12]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <LED_TURN_ON>:
STD_RETURN_TYPES LED_TURN_ON(pin_cfg *ptr)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
	 STD_RETURN_TYPES RET = E_OK;
 80082e4:	2301      	movs	r3, #1
 80082e6:	60fb      	str	r3, [r7, #12]
    if(ptr == NULL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d102      	bne.n	80082f4 <LED_TURN_ON+0x18>
    {
        RET = E_NOK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	60fb      	str	r3, [r7, #12]
 80082f2:	e004      	b.n	80082fe <LED_TURN_ON+0x22>
    }
    else
    {
		#if  (LED_CONNECTION == LED_ACTIVE_HIGH)
			RET = GPIO_PIN_SET_PIN_LOGIC(ptr, GPIO_HIGH);
 80082f4:	2101      	movs	r1, #1
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fb2a 	bl	8008950 <GPIO_PIN_SET_PIN_LOGIC>
 80082fc:	60f8      	str	r0, [r7, #12]
		#else
						RET = E_NOK;
		#endif
    }

    return(RET);
 80082fe:	68fb      	ldr	r3, [r7, #12]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <EXTI0_IRQHandler>:
	}

}

void EXTI0_IRQHandler()
{
 8008308:	b580      	push	{r7, lr}
 800830a:	af00      	add	r7, sp, #0
	if(NULL != G_pf)
	{
		G_pf[0]();
 800830c:	4b02      	ldr	r3, [pc, #8]	; (8008318 <EXTI0_IRQHandler+0x10>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4798      	blx	r3
	}
}
 8008312:	bf00      	nop
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	200000cc 	.word	0x200000cc

0800831c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler()
{
 800831c:	b580      	push	{r7, lr}
 800831e:	af00      	add	r7, sp, #0
	if(NULL != G_pf)
	{
		G_pf[1]();
 8008320:	4b02      	ldr	r3, [pc, #8]	; (800832c <EXTI1_IRQHandler+0x10>)
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	4798      	blx	r3
	}
}
 8008326:	bf00      	nop
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	200000cc 	.word	0x200000cc

08008330 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler()
{
 8008330:	b580      	push	{r7, lr}
 8008332:	af00      	add	r7, sp, #0
	if(NULL != G_pf)
	{
		G_pf[2]();
 8008334:	4b02      	ldr	r3, [pc, #8]	; (8008340 <EXTI2_IRQHandler+0x10>)
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	4798      	blx	r3
	}
}
 800833a:	bf00      	nop
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	200000cc 	.word	0x200000cc

08008344 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler()
{
 8008344:	b580      	push	{r7, lr}
 8008346:	af00      	add	r7, sp, #0
	if(NULL != G_pf)
	{
		G_pf[3]();
 8008348:	4b02      	ldr	r3, [pc, #8]	; (8008354 <EXTI3_IRQHandler+0x10>)
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	4798      	blx	r3
	}
}
 800834e:	bf00      	nop
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	200000cc 	.word	0x200000cc

08008358 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler()
{
 8008358:	b580      	push	{r7, lr}
 800835a:	af00      	add	r7, sp, #0
	if(NULL != G_pf)
	{
		G_pf[4]();
 800835c:	4b02      	ldr	r3, [pc, #8]	; (8008368 <EXTI4_IRQHandler+0x10>)
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	4798      	blx	r3
	}
}
 8008362:	bf00      	nop
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	200000cc 	.word	0x200000cc

0800836c <GPIO_PIN_SET_MODE>:
		RET = GPIO_PIN_SET_PULL_TYPE(ptr);
	}
	return(RET);
}
STD_RETURN_TYPES GPIO_PIN_SET_MODE(pin_cfg * ptr)
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
	STD_RETURN_TYPES RET = E_OK;
 8008374:	2301      	movs	r3, #1
 8008376:	60fb      	str	r3, [r7, #12]

	if(NULL == ptr)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d102      	bne.n	8008384 <GPIO_PIN_SET_MODE+0x18>
	{
		RET = E_NOK;
 800837e:	2300      	movs	r3, #0
 8008380:	60fb      	str	r3, [r7, #12]
 8008382:	e0ce      	b.n	8008522 <GPIO_PIN_SET_MODE+0x1b6>
	}
	else
	{
		switch(ptr ->mode)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	789b      	ldrb	r3, [r3, #2]
 8008388:	2b03      	cmp	r3, #3
 800838a:	f200 80c7 	bhi.w	800851c <GPIO_PIN_SET_MODE+0x1b0>
 800838e:	a201      	add	r2, pc, #4	; (adr r2, 8008394 <GPIO_PIN_SET_MODE+0x28>)
 8008390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008394:	080083a5 	.word	0x080083a5
 8008398:	08008405 	.word	0x08008405
 800839c:	08008463 	.word	0x08008463
 80083a0:	080084c1 	.word	0x080084c1
		{
			case GPIO_INPUT_MODE:
				CLEAR_BIT(*(MODE_REG[ptr->port]),(2*(ptr->pin)));	 /*PIN[0]*/
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	461a      	mov	r2, r3
 80083aa:	4b61      	ldr	r3, [pc, #388]	; (8008530 <GPIO_PIN_SET_MODE+0x1c4>)
 80083ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	785b      	ldrb	r3, [r3, #1]
 80083b6:	005b      	lsls	r3, r3, #1
 80083b8:	2101      	movs	r1, #1
 80083ba:	fa01 f303 	lsl.w	r3, r1, r3
 80083be:	43db      	mvns	r3, r3
 80083c0:	4619      	mov	r1, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	4618      	mov	r0, r3
 80083c8:	4b59      	ldr	r3, [pc, #356]	; (8008530 <GPIO_PIN_SET_MODE+0x1c4>)
 80083ca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80083ce:	400a      	ands	r2, r1
 80083d0:	601a      	str	r2, [r3, #0]
				CLEAR_BIT(*(MODE_REG[ptr->port]),(2*(ptr->pin))+1);  /*PIN[1]*/
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	4b55      	ldr	r3, [pc, #340]	; (8008530 <GPIO_PIN_SET_MODE+0x1c4>)
 80083da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	785b      	ldrb	r3, [r3, #1]
 80083e4:	005b      	lsls	r3, r3, #1
 80083e6:	3301      	adds	r3, #1
 80083e8:	2101      	movs	r1, #1
 80083ea:	fa01 f303 	lsl.w	r3, r1, r3
 80083ee:	43db      	mvns	r3, r3
 80083f0:	4619      	mov	r1, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	4618      	mov	r0, r3
 80083f8:	4b4d      	ldr	r3, [pc, #308]	; (8008530 <GPIO_PIN_SET_MODE+0x1c4>)
 80083fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80083fe:	400a      	ands	r2, r1
 8008400:	601a      	str	r2, [r3, #0]
				break;
 8008402:	e08e      	b.n	8008522 <GPIO_PIN_SET_MODE+0x1b6>
			case GPIO_OUTPUE_MODE:
				SET_BIT(*(MODE_REG[ptr->port]),(2*(ptr->pin)));	 	 /*PIN[0]*/
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	461a      	mov	r2, r3
 800840a:	4b49      	ldr	r3, [pc, #292]	; (8008530 <GPIO_PIN_SET_MODE+0x1c4>)
 800840c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	785b      	ldrb	r3, [r3, #1]
 8008416:	005b      	lsls	r3, r3, #1
 8008418:	2101      	movs	r1, #1
 800841a:	fa01 f303 	lsl.w	r3, r1, r3
 800841e:	4619      	mov	r1, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	4618      	mov	r0, r3
 8008426:	4b42      	ldr	r3, [pc, #264]	; (8008530 <GPIO_PIN_SET_MODE+0x1c4>)
 8008428:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800842c:	430a      	orrs	r2, r1
 800842e:	601a      	str	r2, [r3, #0]
				CLEAR_BIT(*(MODE_REG[ptr->port]),(2*(ptr->pin))+1);  /*PIN[1]*/
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	461a      	mov	r2, r3
 8008436:	4b3e      	ldr	r3, [pc, #248]	; (8008530 <GPIO_PIN_SET_MODE+0x1c4>)
 8008438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	785b      	ldrb	r3, [r3, #1]
 8008442:	005b      	lsls	r3, r3, #1
 8008444:	3301      	adds	r3, #1
 8008446:	2101      	movs	r1, #1
 8008448:	fa01 f303 	lsl.w	r3, r1, r3
 800844c:	43db      	mvns	r3, r3
 800844e:	4619      	mov	r1, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	4618      	mov	r0, r3
 8008456:	4b36      	ldr	r3, [pc, #216]	; (8008530 <GPIO_PIN_SET_MODE+0x1c4>)
 8008458:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800845c:	400a      	ands	r2, r1
 800845e:	601a      	str	r2, [r3, #0]
				break;
 8008460:	e05f      	b.n	8008522 <GPIO_PIN_SET_MODE+0x1b6>
			case GPIO_AF_MODE:
				CLEAR_BIT(*(MODE_REG[ptr->port]),(2*(ptr->pin)));	 /*PIN[0]*/
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	461a      	mov	r2, r3
 8008468:	4b31      	ldr	r3, [pc, #196]	; (8008530 <GPIO_PIN_SET_MODE+0x1c4>)
 800846a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	785b      	ldrb	r3, [r3, #1]
 8008474:	005b      	lsls	r3, r3, #1
 8008476:	2101      	movs	r1, #1
 8008478:	fa01 f303 	lsl.w	r3, r1, r3
 800847c:	43db      	mvns	r3, r3
 800847e:	4619      	mov	r1, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	4618      	mov	r0, r3
 8008486:	4b2a      	ldr	r3, [pc, #168]	; (8008530 <GPIO_PIN_SET_MODE+0x1c4>)
 8008488:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800848c:	400a      	ands	r2, r1
 800848e:	601a      	str	r2, [r3, #0]
				SET_BIT(*(MODE_REG[ptr->port]),(2*(ptr->pin))+1);  	 /*PIN[1]*/
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	461a      	mov	r2, r3
 8008496:	4b26      	ldr	r3, [pc, #152]	; (8008530 <GPIO_PIN_SET_MODE+0x1c4>)
 8008498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	785b      	ldrb	r3, [r3, #1]
 80084a2:	005b      	lsls	r3, r3, #1
 80084a4:	3301      	adds	r3, #1
 80084a6:	2101      	movs	r1, #1
 80084a8:	fa01 f303 	lsl.w	r3, r1, r3
 80084ac:	4619      	mov	r1, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	4618      	mov	r0, r3
 80084b4:	4b1e      	ldr	r3, [pc, #120]	; (8008530 <GPIO_PIN_SET_MODE+0x1c4>)
 80084b6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80084ba:	430a      	orrs	r2, r1
 80084bc:	601a      	str	r2, [r3, #0]
				break;
 80084be:	e030      	b.n	8008522 <GPIO_PIN_SET_MODE+0x1b6>
			case GPIO_ANALOG_MODE:
				SET_BIT(*(MODE_REG[ptr->port]),(2*(ptr->pin)));	   	 /*PIN[0]*/
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	461a      	mov	r2, r3
 80084c6:	4b1a      	ldr	r3, [pc, #104]	; (8008530 <GPIO_PIN_SET_MODE+0x1c4>)
 80084c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	785b      	ldrb	r3, [r3, #1]
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	2101      	movs	r1, #1
 80084d6:	fa01 f303 	lsl.w	r3, r1, r3
 80084da:	4619      	mov	r1, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	4618      	mov	r0, r3
 80084e2:	4b13      	ldr	r3, [pc, #76]	; (8008530 <GPIO_PIN_SET_MODE+0x1c4>)
 80084e4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80084e8:	430a      	orrs	r2, r1
 80084ea:	601a      	str	r2, [r3, #0]
				SET_BIT(*(MODE_REG[ptr->port]),(2*(ptr->pin))+1);    /*PIN[1]*/
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	461a      	mov	r2, r3
 80084f2:	4b0f      	ldr	r3, [pc, #60]	; (8008530 <GPIO_PIN_SET_MODE+0x1c4>)
 80084f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	785b      	ldrb	r3, [r3, #1]
 80084fe:	005b      	lsls	r3, r3, #1
 8008500:	3301      	adds	r3, #1
 8008502:	2101      	movs	r1, #1
 8008504:	fa01 f303 	lsl.w	r3, r1, r3
 8008508:	4619      	mov	r1, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	4618      	mov	r0, r3
 8008510:	4b07      	ldr	r3, [pc, #28]	; (8008530 <GPIO_PIN_SET_MODE+0x1c4>)
 8008512:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008516:	430a      	orrs	r2, r1
 8008518:	601a      	str	r2, [r3, #0]
				break;
 800851a:	e002      	b.n	8008522 <GPIO_PIN_SET_MODE+0x1b6>
			default:
				RET = E_NOK;
 800851c:	2300      	movs	r3, #0
 800851e:	60fb      	str	r3, [r7, #12]
				break;
 8008520:	bf00      	nop
		}
	}

	return(RET);
 8008522:	68fb      	ldr	r3, [r7, #12]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3714      	adds	r7, #20
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr
 8008530:	20000000 	.word	0x20000000

08008534 <GPIO_PIN_SET_OUTPUT_TYPE>:

STD_RETURN_TYPES GPIO_PIN_SET_OUTPUT_TYPE(pin_cfg *ptr)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
	STD_RETURN_TYPES RET = E_OK;
 800853c:	2301      	movs	r3, #1
 800853e:	60fb      	str	r3, [r7, #12]

	if(NULL == ptr)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d102      	bne.n	800854c <GPIO_PIN_SET_OUTPUT_TYPE+0x18>
	{
		RET = E_NOK;
 8008546:	2300      	movs	r3, #0
 8008548:	60fb      	str	r3, [r7, #12]
 800854a:	e036      	b.n	80085ba <GPIO_PIN_SET_OUTPUT_TYPE+0x86>
	}
	else
	{
		switch(ptr ->out_type)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	78db      	ldrb	r3, [r3, #3]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <GPIO_PIN_SET_OUTPUT_TYPE+0x26>
 8008554:	2b01      	cmp	r3, #1
 8008556:	d017      	beq.n	8008588 <GPIO_PIN_SET_OUTPUT_TYPE+0x54>
 8008558:	e02c      	b.n	80085b4 <GPIO_PIN_SET_OUTPUT_TYPE+0x80>
		{
			case PUSH_PULL_OUTPUT_TYPE:
				CLEAR_BIT(*(OTYPER_REG[ptr->port]),(ptr->pin));
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	461a      	mov	r2, r3
 8008560:	4b19      	ldr	r3, [pc, #100]	; (80085c8 <GPIO_PIN_SET_OUTPUT_TYPE+0x94>)
 8008562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	785b      	ldrb	r3, [r3, #1]
 800856c:	4619      	mov	r1, r3
 800856e:	2301      	movs	r3, #1
 8008570:	408b      	lsls	r3, r1
 8008572:	43db      	mvns	r3, r3
 8008574:	4619      	mov	r1, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	4618      	mov	r0, r3
 800857c:	4b12      	ldr	r3, [pc, #72]	; (80085c8 <GPIO_PIN_SET_OUTPUT_TYPE+0x94>)
 800857e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008582:	400a      	ands	r2, r1
 8008584:	601a      	str	r2, [r3, #0]
				break;
 8008586:	e018      	b.n	80085ba <GPIO_PIN_SET_OUTPUT_TYPE+0x86>
			case OPEN_DRAIN_OUTPUT_TYPE:
				SET_BIT(*(OTYPER_REG[ptr->port]),(ptr->pin));
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	461a      	mov	r2, r3
 800858e:	4b0e      	ldr	r3, [pc, #56]	; (80085c8 <GPIO_PIN_SET_OUTPUT_TYPE+0x94>)
 8008590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	785b      	ldrb	r3, [r3, #1]
 800859a:	4619      	mov	r1, r3
 800859c:	2301      	movs	r3, #1
 800859e:	408b      	lsls	r3, r1
 80085a0:	4619      	mov	r1, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	4618      	mov	r0, r3
 80085a8:	4b07      	ldr	r3, [pc, #28]	; (80085c8 <GPIO_PIN_SET_OUTPUT_TYPE+0x94>)
 80085aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	601a      	str	r2, [r3, #0]
				break;
 80085b2:	e002      	b.n	80085ba <GPIO_PIN_SET_OUTPUT_TYPE+0x86>
			default:
				RET = E_NOK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	60fb      	str	r3, [r7, #12]
				break;
 80085b8:	bf00      	nop
		}
	}

	return(RET);
 80085ba:	68fb      	ldr	r3, [r7, #12]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3714      	adds	r7, #20
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	20000048 	.word	0x20000048

080085cc <GPIO_PIN_SET_OUTPUT_SPEED>:

STD_RETURN_TYPES GPIO_PIN_SET_OUTPUT_SPEED(pin_cfg * ptr)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
	STD_RETURN_TYPES RET = E_OK;
 80085d4:	2301      	movs	r3, #1
 80085d6:	60fb      	str	r3, [r7, #12]

	if(NULL == ptr)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d102      	bne.n	80085e4 <GPIO_PIN_SET_OUTPUT_SPEED+0x18>
	{
		RET = E_NOK;
 80085de:	2300      	movs	r3, #0
 80085e0:	60fb      	str	r3, [r7, #12]
 80085e2:	e0ce      	b.n	8008782 <GPIO_PIN_SET_OUTPUT_SPEED+0x1b6>
	}
	else
	{
		switch(ptr ->speed)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	791b      	ldrb	r3, [r3, #4]
 80085e8:	2b03      	cmp	r3, #3
 80085ea:	f200 80c7 	bhi.w	800877c <GPIO_PIN_SET_OUTPUT_SPEED+0x1b0>
 80085ee:	a201      	add	r2, pc, #4	; (adr r2, 80085f4 <GPIO_PIN_SET_OUTPUT_SPEED+0x28>)
 80085f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f4:	08008605 	.word	0x08008605
 80085f8:	08008665 	.word	0x08008665
 80085fc:	080086c3 	.word	0x080086c3
 8008600:	08008721 	.word	0x08008721
		{
			case LOW_SPEED:
				CLEAR_BIT(*(OSPEEDR_REG[ptr->port]),(2*(ptr->pin)));	 /*PIN[0]*/
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	461a      	mov	r2, r3
 800860a:	4b61      	ldr	r3, [pc, #388]	; (8008790 <GPIO_PIN_SET_OUTPUT_SPEED+0x1c4>)
 800860c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	785b      	ldrb	r3, [r3, #1]
 8008616:	005b      	lsls	r3, r3, #1
 8008618:	2101      	movs	r1, #1
 800861a:	fa01 f303 	lsl.w	r3, r1, r3
 800861e:	43db      	mvns	r3, r3
 8008620:	4619      	mov	r1, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	4618      	mov	r0, r3
 8008628:	4b59      	ldr	r3, [pc, #356]	; (8008790 <GPIO_PIN_SET_OUTPUT_SPEED+0x1c4>)
 800862a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800862e:	400a      	ands	r2, r1
 8008630:	601a      	str	r2, [r3, #0]
				CLEAR_BIT(*(OSPEEDR_REG[ptr->port]),(2*(ptr->pin))+1);  /*PIN[1]*/
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	461a      	mov	r2, r3
 8008638:	4b55      	ldr	r3, [pc, #340]	; (8008790 <GPIO_PIN_SET_OUTPUT_SPEED+0x1c4>)
 800863a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	785b      	ldrb	r3, [r3, #1]
 8008644:	005b      	lsls	r3, r3, #1
 8008646:	3301      	adds	r3, #1
 8008648:	2101      	movs	r1, #1
 800864a:	fa01 f303 	lsl.w	r3, r1, r3
 800864e:	43db      	mvns	r3, r3
 8008650:	4619      	mov	r1, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	4618      	mov	r0, r3
 8008658:	4b4d      	ldr	r3, [pc, #308]	; (8008790 <GPIO_PIN_SET_OUTPUT_SPEED+0x1c4>)
 800865a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800865e:	400a      	ands	r2, r1
 8008660:	601a      	str	r2, [r3, #0]
				break;
 8008662:	e08e      	b.n	8008782 <GPIO_PIN_SET_OUTPUT_SPEED+0x1b6>
			case MIDUIM_SPEED:
				SET_BIT(*(OSPEEDR_REG[ptr->port]),(2*(ptr->pin)));	 	 /*PIN[0]*/
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	461a      	mov	r2, r3
 800866a:	4b49      	ldr	r3, [pc, #292]	; (8008790 <GPIO_PIN_SET_OUTPUT_SPEED+0x1c4>)
 800866c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	785b      	ldrb	r3, [r3, #1]
 8008676:	005b      	lsls	r3, r3, #1
 8008678:	2101      	movs	r1, #1
 800867a:	fa01 f303 	lsl.w	r3, r1, r3
 800867e:	4619      	mov	r1, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	4618      	mov	r0, r3
 8008686:	4b42      	ldr	r3, [pc, #264]	; (8008790 <GPIO_PIN_SET_OUTPUT_SPEED+0x1c4>)
 8008688:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800868c:	430a      	orrs	r2, r1
 800868e:	601a      	str	r2, [r3, #0]
				CLEAR_BIT(*(OSPEEDR_REG[ptr->port]),(2*(ptr->pin))+1);  /*PIN[1]*/
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	461a      	mov	r2, r3
 8008696:	4b3e      	ldr	r3, [pc, #248]	; (8008790 <GPIO_PIN_SET_OUTPUT_SPEED+0x1c4>)
 8008698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	785b      	ldrb	r3, [r3, #1]
 80086a2:	005b      	lsls	r3, r3, #1
 80086a4:	3301      	adds	r3, #1
 80086a6:	2101      	movs	r1, #1
 80086a8:	fa01 f303 	lsl.w	r3, r1, r3
 80086ac:	43db      	mvns	r3, r3
 80086ae:	4619      	mov	r1, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	4618      	mov	r0, r3
 80086b6:	4b36      	ldr	r3, [pc, #216]	; (8008790 <GPIO_PIN_SET_OUTPUT_SPEED+0x1c4>)
 80086b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80086bc:	400a      	ands	r2, r1
 80086be:	601a      	str	r2, [r3, #0]
				break;
 80086c0:	e05f      	b.n	8008782 <GPIO_PIN_SET_OUTPUT_SPEED+0x1b6>
			case HIGH_SPEED:
				CLEAR_BIT(*(OSPEEDR_REG[ptr->port]),(2*(ptr->pin)));	 /*PIN[0]*/
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	461a      	mov	r2, r3
 80086c8:	4b31      	ldr	r3, [pc, #196]	; (8008790 <GPIO_PIN_SET_OUTPUT_SPEED+0x1c4>)
 80086ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	785b      	ldrb	r3, [r3, #1]
 80086d4:	005b      	lsls	r3, r3, #1
 80086d6:	2101      	movs	r1, #1
 80086d8:	fa01 f303 	lsl.w	r3, r1, r3
 80086dc:	43db      	mvns	r3, r3
 80086de:	4619      	mov	r1, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	4618      	mov	r0, r3
 80086e6:	4b2a      	ldr	r3, [pc, #168]	; (8008790 <GPIO_PIN_SET_OUTPUT_SPEED+0x1c4>)
 80086e8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80086ec:	400a      	ands	r2, r1
 80086ee:	601a      	str	r2, [r3, #0]
				SET_BIT(*(OSPEEDR_REG[ptr->port]),(2*(ptr->pin))+1);  	 /*PIN[1]*/
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	4b26      	ldr	r3, [pc, #152]	; (8008790 <GPIO_PIN_SET_OUTPUT_SPEED+0x1c4>)
 80086f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	785b      	ldrb	r3, [r3, #1]
 8008702:	005b      	lsls	r3, r3, #1
 8008704:	3301      	adds	r3, #1
 8008706:	2101      	movs	r1, #1
 8008708:	fa01 f303 	lsl.w	r3, r1, r3
 800870c:	4619      	mov	r1, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	4618      	mov	r0, r3
 8008714:	4b1e      	ldr	r3, [pc, #120]	; (8008790 <GPIO_PIN_SET_OUTPUT_SPEED+0x1c4>)
 8008716:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800871a:	430a      	orrs	r2, r1
 800871c:	601a      	str	r2, [r3, #0]
				break;
 800871e:	e030      	b.n	8008782 <GPIO_PIN_SET_OUTPUT_SPEED+0x1b6>
			case VERY_HIGH_SPEED:
				SET_BIT(*(OSPEEDR_REG[ptr->port]),(2*(ptr->pin)));	   	 /*PIN[0]*/
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	461a      	mov	r2, r3
 8008726:	4b1a      	ldr	r3, [pc, #104]	; (8008790 <GPIO_PIN_SET_OUTPUT_SPEED+0x1c4>)
 8008728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	785b      	ldrb	r3, [r3, #1]
 8008732:	005b      	lsls	r3, r3, #1
 8008734:	2101      	movs	r1, #1
 8008736:	fa01 f303 	lsl.w	r3, r1, r3
 800873a:	4619      	mov	r1, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	4618      	mov	r0, r3
 8008742:	4b13      	ldr	r3, [pc, #76]	; (8008790 <GPIO_PIN_SET_OUTPUT_SPEED+0x1c4>)
 8008744:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008748:	430a      	orrs	r2, r1
 800874a:	601a      	str	r2, [r3, #0]
				SET_BIT(*(OSPEEDR_REG[ptr->port]),(2*(ptr->pin))+1);    /*PIN[1]*/
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	461a      	mov	r2, r3
 8008752:	4b0f      	ldr	r3, [pc, #60]	; (8008790 <GPIO_PIN_SET_OUTPUT_SPEED+0x1c4>)
 8008754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	785b      	ldrb	r3, [r3, #1]
 800875e:	005b      	lsls	r3, r3, #1
 8008760:	3301      	adds	r3, #1
 8008762:	2101      	movs	r1, #1
 8008764:	fa01 f303 	lsl.w	r3, r1, r3
 8008768:	4619      	mov	r1, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	4618      	mov	r0, r3
 8008770:	4b07      	ldr	r3, [pc, #28]	; (8008790 <GPIO_PIN_SET_OUTPUT_SPEED+0x1c4>)
 8008772:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008776:	430a      	orrs	r2, r1
 8008778:	601a      	str	r2, [r3, #0]
				break;
 800877a:	e002      	b.n	8008782 <GPIO_PIN_SET_OUTPUT_SPEED+0x1b6>
			default:
				RET = E_NOK;
 800877c:	2300      	movs	r3, #0
 800877e:	60fb      	str	r3, [r7, #12]
				break;
 8008780:	bf00      	nop
		}
	}

	return(RET);
 8008782:	68fb      	ldr	r3, [r7, #12]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	20000060 	.word	0x20000060

08008794 <GPIO_PIN_SET_PULL_TYPE>:

STD_RETURN_TYPES GPIO_PIN_SET_PULL_TYPE(pin_cfg * ptr)
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
	STD_RETURN_TYPES RET = E_OK;
 800879c:	2301      	movs	r3, #1
 800879e:	60fb      	str	r3, [r7, #12]

	if(NULL == ptr)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d102      	bne.n	80087ac <GPIO_PIN_SET_PULL_TYPE+0x18>
	{
		RET = E_NOK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	60fb      	str	r3, [r7, #12]
 80087aa:	e099      	b.n	80088e0 <GPIO_PIN_SET_PULL_TYPE+0x14c>
	}
	else
	{
		switch(ptr -> pull_type)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	795b      	ldrb	r3, [r3, #5]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d034      	beq.n	800881e <GPIO_PIN_SET_PULL_TYPE+0x8a>
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d061      	beq.n	800887c <GPIO_PIN_SET_PULL_TYPE+0xe8>
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f040 808e 	bne.w	80088da <GPIO_PIN_SET_PULL_TYPE+0x146>
		{
			case NO_PULL:
				CLEAR_BIT(*(PUPDR_REG[ptr->port]),(2*(ptr->pin)));	     /*PIN[0]*/
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	4b4a      	ldr	r3, [pc, #296]	; (80088f0 <GPIO_PIN_SET_PULL_TYPE+0x15c>)
 80087c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	785b      	ldrb	r3, [r3, #1]
 80087d0:	005b      	lsls	r3, r3, #1
 80087d2:	2101      	movs	r1, #1
 80087d4:	fa01 f303 	lsl.w	r3, r1, r3
 80087d8:	43db      	mvns	r3, r3
 80087da:	4619      	mov	r1, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	4618      	mov	r0, r3
 80087e2:	4b43      	ldr	r3, [pc, #268]	; (80088f0 <GPIO_PIN_SET_PULL_TYPE+0x15c>)
 80087e4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80087e8:	400a      	ands	r2, r1
 80087ea:	601a      	str	r2, [r3, #0]
				CLEAR_BIT(*(PUPDR_REG[ptr->port]),(2*(ptr->pin))+1);     /*PIN[1]*/
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	461a      	mov	r2, r3
 80087f2:	4b3f      	ldr	r3, [pc, #252]	; (80088f0 <GPIO_PIN_SET_PULL_TYPE+0x15c>)
 80087f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	785b      	ldrb	r3, [r3, #1]
 80087fe:	005b      	lsls	r3, r3, #1
 8008800:	3301      	adds	r3, #1
 8008802:	2101      	movs	r1, #1
 8008804:	fa01 f303 	lsl.w	r3, r1, r3
 8008808:	43db      	mvns	r3, r3
 800880a:	4619      	mov	r1, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	4618      	mov	r0, r3
 8008812:	4b37      	ldr	r3, [pc, #220]	; (80088f0 <GPIO_PIN_SET_PULL_TYPE+0x15c>)
 8008814:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008818:	400a      	ands	r2, r1
 800881a:	601a      	str	r2, [r3, #0]
				break;
 800881c:	e060      	b.n	80088e0 <GPIO_PIN_SET_PULL_TYPE+0x14c>
			case PULL_UP:
				SET_BIT(*(PUPDR_REG[ptr->port]),(2*(ptr->pin)));	 	 /*PIN[0]*/
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	461a      	mov	r2, r3
 8008824:	4b32      	ldr	r3, [pc, #200]	; (80088f0 <GPIO_PIN_SET_PULL_TYPE+0x15c>)
 8008826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	785b      	ldrb	r3, [r3, #1]
 8008830:	005b      	lsls	r3, r3, #1
 8008832:	2101      	movs	r1, #1
 8008834:	fa01 f303 	lsl.w	r3, r1, r3
 8008838:	4619      	mov	r1, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	4618      	mov	r0, r3
 8008840:	4b2b      	ldr	r3, [pc, #172]	; (80088f0 <GPIO_PIN_SET_PULL_TYPE+0x15c>)
 8008842:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008846:	430a      	orrs	r2, r1
 8008848:	601a      	str	r2, [r3, #0]
				CLEAR_BIT(*(PUPDR_REG[ptr->port]),(2*(ptr->pin))+1);     /*PIN[1]*/
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	4b27      	ldr	r3, [pc, #156]	; (80088f0 <GPIO_PIN_SET_PULL_TYPE+0x15c>)
 8008852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	785b      	ldrb	r3, [r3, #1]
 800885c:	005b      	lsls	r3, r3, #1
 800885e:	3301      	adds	r3, #1
 8008860:	2101      	movs	r1, #1
 8008862:	fa01 f303 	lsl.w	r3, r1, r3
 8008866:	43db      	mvns	r3, r3
 8008868:	4619      	mov	r1, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	4618      	mov	r0, r3
 8008870:	4b1f      	ldr	r3, [pc, #124]	; (80088f0 <GPIO_PIN_SET_PULL_TYPE+0x15c>)
 8008872:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008876:	400a      	ands	r2, r1
 8008878:	601a      	str	r2, [r3, #0]
				break;
 800887a:	e031      	b.n	80088e0 <GPIO_PIN_SET_PULL_TYPE+0x14c>
			case PULL_DOWN:
				CLEAR_BIT(*(PUPDR_REG[ptr->port]),(2*(ptr->pin)));	     /*PIN[0]*/
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	461a      	mov	r2, r3
 8008882:	4b1b      	ldr	r3, [pc, #108]	; (80088f0 <GPIO_PIN_SET_PULL_TYPE+0x15c>)
 8008884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	785b      	ldrb	r3, [r3, #1]
 800888e:	005b      	lsls	r3, r3, #1
 8008890:	2101      	movs	r1, #1
 8008892:	fa01 f303 	lsl.w	r3, r1, r3
 8008896:	43db      	mvns	r3, r3
 8008898:	4619      	mov	r1, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	4618      	mov	r0, r3
 80088a0:	4b13      	ldr	r3, [pc, #76]	; (80088f0 <GPIO_PIN_SET_PULL_TYPE+0x15c>)
 80088a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80088a6:	400a      	ands	r2, r1
 80088a8:	601a      	str	r2, [r3, #0]
				SET_BIT(*(PUPDR_REG[ptr->port]),(2*(ptr->pin))+1);  	 /*PIN[1]*/
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	461a      	mov	r2, r3
 80088b0:	4b0f      	ldr	r3, [pc, #60]	; (80088f0 <GPIO_PIN_SET_PULL_TYPE+0x15c>)
 80088b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	785b      	ldrb	r3, [r3, #1]
 80088bc:	005b      	lsls	r3, r3, #1
 80088be:	3301      	adds	r3, #1
 80088c0:	2101      	movs	r1, #1
 80088c2:	fa01 f303 	lsl.w	r3, r1, r3
 80088c6:	4619      	mov	r1, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	4618      	mov	r0, r3
 80088ce:	4b08      	ldr	r3, [pc, #32]	; (80088f0 <GPIO_PIN_SET_PULL_TYPE+0x15c>)
 80088d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80088d4:	430a      	orrs	r2, r1
 80088d6:	601a      	str	r2, [r3, #0]
				break;
 80088d8:	e002      	b.n	80088e0 <GPIO_PIN_SET_PULL_TYPE+0x14c>
			default:
				RET = E_NOK;
 80088da:	2300      	movs	r3, #0
 80088dc:	60fb      	str	r3, [r7, #12]
				break;
 80088de:	bf00      	nop
		}
	}

	return(RET);
 80088e0:	68fb      	ldr	r3, [r7, #12]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3714      	adds	r7, #20
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	20000078 	.word	0x20000078

080088f4 <GPIO_PIN_GET_PIN_LOGIC>:

STD_RETURN_TYPES GPIO_PIN_GET_PIN_LOGIC(pin_cfg * ptr, logic_t *logic)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
	STD_RETURN_TYPES RET = E_OK;
 80088fe:	2301      	movs	r3, #1
 8008900:	60fb      	str	r3, [r7, #12]

	if(NULL == ptr)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d102      	bne.n	800890e <GPIO_PIN_GET_PIN_LOGIC+0x1a>
	{
		RET = E_NOK;
 8008908:	2300      	movs	r3, #0
 800890a:	60fb      	str	r3, [r7, #12]
 800890c:	e017      	b.n	800893e <GPIO_PIN_GET_PIN_LOGIC+0x4a>
	}
	else
	{
		* logic = READ_BIT(*(IDR_REG[ptr->port]),(ptr->pin));
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	4b0d      	ldr	r3, [pc, #52]	; (800894c <GPIO_PIN_GET_PIN_LOGIC+0x58>)
 8008916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	7852      	ldrb	r2, [r2, #1]
 8008920:	fa23 f202 	lsr.w	r2, r3, r2
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	4619      	mov	r1, r3
 800892a:	4b08      	ldr	r3, [pc, #32]	; (800894c <GPIO_PIN_GET_PIN_LOGIC+0x58>)
 800892c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008930:	f002 0201 	and.w	r2, r2, #1
 8008934:	601a      	str	r2, [r3, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	b2da      	uxtb	r2, r3
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	701a      	strb	r2, [r3, #0]
	}

	return(RET);
 800893e:	68fb      	ldr	r3, [r7, #12]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	20000030 	.word	0x20000030

08008950 <GPIO_PIN_SET_PIN_LOGIC>:

STD_RETURN_TYPES GPIO_PIN_SET_PIN_LOGIC(pin_cfg * ptr, logic_t logic)
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	460b      	mov	r3, r1
 800895a:	70fb      	strb	r3, [r7, #3]
	STD_RETURN_TYPES RET = E_OK;
 800895c:	2301      	movs	r3, #1
 800895e:	60fb      	str	r3, [r7, #12]

	if(NULL == ptr)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d102      	bne.n	800896c <GPIO_PIN_SET_PIN_LOGIC+0x1c>
	{
		RET = E_NOK;
 8008966:	2300      	movs	r3, #0
 8008968:	60fb      	str	r3, [r7, #12]
 800896a:	e035      	b.n	80089d8 <GPIO_PIN_SET_PIN_LOGIC+0x88>
	}
	else
	{
		switch(logic)
 800896c:	78fb      	ldrb	r3, [r7, #3]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d002      	beq.n	8008978 <GPIO_PIN_SET_PIN_LOGIC+0x28>
 8008972:	2b01      	cmp	r3, #1
 8008974:	d017      	beq.n	80089a6 <GPIO_PIN_SET_PIN_LOGIC+0x56>
 8008976:	e02c      	b.n	80089d2 <GPIO_PIN_SET_PIN_LOGIC+0x82>
		{
		case GPIO_LOW:
			CLEAR_BIT(*(ODR_REG[ptr->port]),(ptr->pin));
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	461a      	mov	r2, r3
 800897e:	4b1a      	ldr	r3, [pc, #104]	; (80089e8 <GPIO_PIN_SET_PIN_LOGIC+0x98>)
 8008980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	785b      	ldrb	r3, [r3, #1]
 800898a:	4619      	mov	r1, r3
 800898c:	2301      	movs	r3, #1
 800898e:	408b      	lsls	r3, r1
 8008990:	43db      	mvns	r3, r3
 8008992:	4619      	mov	r1, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	4618      	mov	r0, r3
 800899a:	4b13      	ldr	r3, [pc, #76]	; (80089e8 <GPIO_PIN_SET_PIN_LOGIC+0x98>)
 800899c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80089a0:	400a      	ands	r2, r1
 80089a2:	601a      	str	r2, [r3, #0]
			break;
 80089a4:	e018      	b.n	80089d8 <GPIO_PIN_SET_PIN_LOGIC+0x88>
		case GPIO_HIGH:
			SET_BIT(*(ODR_REG[ptr->port]),(ptr->pin));
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	461a      	mov	r2, r3
 80089ac:	4b0e      	ldr	r3, [pc, #56]	; (80089e8 <GPIO_PIN_SET_PIN_LOGIC+0x98>)
 80089ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	785b      	ldrb	r3, [r3, #1]
 80089b8:	4619      	mov	r1, r3
 80089ba:	2301      	movs	r3, #1
 80089bc:	408b      	lsls	r3, r1
 80089be:	4619      	mov	r1, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	4618      	mov	r0, r3
 80089c6:	4b08      	ldr	r3, [pc, #32]	; (80089e8 <GPIO_PIN_SET_PIN_LOGIC+0x98>)
 80089c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80089cc:	430a      	orrs	r2, r1
 80089ce:	601a      	str	r2, [r3, #0]
			break;
 80089d0:	e002      	b.n	80089d8 <GPIO_PIN_SET_PIN_LOGIC+0x88>
		default:
			RET = E_NOK;
 80089d2:	2300      	movs	r3, #0
 80089d4:	60fb      	str	r3, [r7, #12]
			break;
 80089d6:	bf00      	nop
		}
	}

	return(RET);
 80089d8:	68fb      	ldr	r3, [r7, #12]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	20000018 	.word	0x20000018

080089ec <RCC_INTIALIZE>:


/*********************************** FUNCTION DEFINATION START  ***********************************************************/

STD_RETURN_TYPES RCC_INTIALIZE(void)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
	STD_RETURN_TYPES RET = E_OK;
 80089f2:	2301      	movs	r3, #1
 80089f4:	607b      	str	r3, [r7, #4]

	#if RCC_CLK_SRC ==  HSI_CLK_SRC
		RET = RCC_HSI_INTIALIZE();
 80089f6:	f000 fa29 	bl	8008e4c <RCC_HSI_INTIALIZE>
 80089fa:	6078      	str	r0, [r7, #4]
				RCC_PLL_INTIALIZE();
	#else
				RET = E_NOK;
	#endif

	return(RET);
 80089fc:	687b      	ldr	r3, [r7, #4]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
	...

08008a08 <RCC_PERIPHERAL_ENABLE>:

STD_RETURN_TYPES RCC_PERIPHERAL_ENABLE(RCC_BUSS _BUSS,uint32 _PERIPHERAL)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	4603      	mov	r3, r0
 8008a10:	6039      	str	r1, [r7, #0]
 8008a12:	71fb      	strb	r3, [r7, #7]
	STD_RETURN_TYPES RET = E_OK;
 8008a14:	2301      	movs	r3, #1
 8008a16:	60fb      	str	r3, [r7, #12]

	switch(_BUSS)
 8008a18:	79fb      	ldrb	r3, [r7, #7]
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	d81e      	bhi.n	8008a5c <RCC_PERIPHERAL_ENABLE+0x54>
 8008a1e:	a201      	add	r2, pc, #4	; (adr r2, 8008a24 <RCC_PERIPHERAL_ENABLE+0x1c>)
 8008a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a24:	08008a35 	.word	0x08008a35
 8008a28:	08008a3f 	.word	0x08008a3f
 8008a2c:	08008a49 	.word	0x08008a49
 8008a30:	08008a53 	.word	0x08008a53
	{
		case AHB1:
			RET = RCC_AHB1_PHERIPHERAL_ENABLE(_PERIPHERAL);
 8008a34:	6838      	ldr	r0, [r7, #0]
 8008a36:	f000 f819 	bl	8008a6c <RCC_AHB1_PHERIPHERAL_ENABLE>
 8008a3a:	60f8      	str	r0, [r7, #12]
			break;
 8008a3c:	e011      	b.n	8008a62 <RCC_PERIPHERAL_ENABLE+0x5a>

		case AHB2:
			RET = RCC_AHB2_PHERIPHERAL_ENABLE(_PERIPHERAL);
 8008a3e:	6838      	ldr	r0, [r7, #0]
 8008a40:	f000 f8a2 	bl	8008b88 <RCC_AHB2_PHERIPHERAL_ENABLE>
 8008a44:	60f8      	str	r0, [r7, #12]
			break;
 8008a46:	e00c      	b.n	8008a62 <RCC_PERIPHERAL_ENABLE+0x5a>

		case APB1:
			RET = RCC_APB1_PHERIPHERAL_ENABLE(_PERIPHERAL);
 8008a48:	6838      	ldr	r0, [r7, #0]
 8008a4a:	f000 f8b3 	bl	8008bb4 <RCC_APB1_PHERIPHERAL_ENABLE>
 8008a4e:	60f8      	str	r0, [r7, #12]
			break;
 8008a50:	e007      	b.n	8008a62 <RCC_PERIPHERAL_ENABLE+0x5a>

		case APB2:
			RET = RCC_APB2_PHERIPHERAL_ENABLE(_PERIPHERAL);
 8008a52:	6838      	ldr	r0, [r7, #0]
 8008a54:	f000 f962 	bl	8008d1c <RCC_APB2_PHERIPHERAL_ENABLE>
 8008a58:	60f8      	str	r0, [r7, #12]
			break;
 8008a5a:	e002      	b.n	8008a62 <RCC_PERIPHERAL_ENABLE+0x5a>

		default:
			RET = E_NOK;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	60fb      	str	r3, [r7, #12]
			break;
 8008a60:	bf00      	nop
	}
	return(RET);
 8008a62:	68fb      	ldr	r3, [r7, #12]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <RCC_AHB1_PHERIPHERAL_ENABLE>:
	}
	return(RET);
}

static STD_RETURN_TYPES RCC_AHB1_PHERIPHERAL_ENABLE(uint32 _PERIPHERAL)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
	STD_RETURN_TYPES RET = E_OK;
 8008a74:	2301      	movs	r3, #1
 8008a76:	60fb      	str	r3, [r7, #12]

	switch(_PERIPHERAL)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b16      	cmp	r3, #22
 8008a7c:	d878      	bhi.n	8008b70 <RCC_AHB1_PHERIPHERAL_ENABLE+0x104>
 8008a7e:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <RCC_AHB1_PHERIPHERAL_ENABLE+0x18>)
 8008a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a84:	08008ae1 	.word	0x08008ae1
 8008a88:	08008af1 	.word	0x08008af1
 8008a8c:	08008b01 	.word	0x08008b01
 8008a90:	08008b11 	.word	0x08008b11
 8008a94:	08008b21 	.word	0x08008b21
 8008a98:	08008b71 	.word	0x08008b71
 8008a9c:	08008b71 	.word	0x08008b71
 8008aa0:	08008b31 	.word	0x08008b31
 8008aa4:	08008b71 	.word	0x08008b71
 8008aa8:	08008b71 	.word	0x08008b71
 8008aac:	08008b71 	.word	0x08008b71
 8008ab0:	08008b71 	.word	0x08008b71
 8008ab4:	08008b41 	.word	0x08008b41
 8008ab8:	08008b71 	.word	0x08008b71
 8008abc:	08008b71 	.word	0x08008b71
 8008ac0:	08008b71 	.word	0x08008b71
 8008ac4:	08008b71 	.word	0x08008b71
 8008ac8:	08008b71 	.word	0x08008b71
 8008acc:	08008b71 	.word	0x08008b71
 8008ad0:	08008b71 	.word	0x08008b71
 8008ad4:	08008b71 	.word	0x08008b71
 8008ad8:	08008b51 	.word	0x08008b51
 8008adc:	08008b61 	.word	0x08008b61
	{
		case GPIOA_PERIPHERAL:
			RET = GPIOA_PERIPHERAL_ENABLE();
 8008ae0:	4b28      	ldr	r3, [pc, #160]	; (8008b84 <RCC_AHB1_PHERIPHERAL_ENABLE+0x118>)
 8008ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae4:	4a27      	ldr	r2, [pc, #156]	; (8008b84 <RCC_AHB1_PHERIPHERAL_ENABLE+0x118>)
 8008ae6:	f043 0301 	orr.w	r3, r3, #1
 8008aea:	6313      	str	r3, [r2, #48]	; 0x30
 8008aec:	60fb      	str	r3, [r7, #12]
			break;
 8008aee:	e042      	b.n	8008b76 <RCC_AHB1_PHERIPHERAL_ENABLE+0x10a>

		case GPIOB_PERIPHERAL:
			RET = GPIOB_PERIPHERAL_ENABLE();
 8008af0:	4b24      	ldr	r3, [pc, #144]	; (8008b84 <RCC_AHB1_PHERIPHERAL_ENABLE+0x118>)
 8008af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af4:	4a23      	ldr	r2, [pc, #140]	; (8008b84 <RCC_AHB1_PHERIPHERAL_ENABLE+0x118>)
 8008af6:	f043 0302 	orr.w	r3, r3, #2
 8008afa:	6313      	str	r3, [r2, #48]	; 0x30
 8008afc:	60fb      	str	r3, [r7, #12]
			break;
 8008afe:	e03a      	b.n	8008b76 <RCC_AHB1_PHERIPHERAL_ENABLE+0x10a>

		case GPIOC_PERIPHERAL:
			RET = GPIOC_PERIPHERAL_ENABLE();
 8008b00:	4b20      	ldr	r3, [pc, #128]	; (8008b84 <RCC_AHB1_PHERIPHERAL_ENABLE+0x118>)
 8008b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b04:	4a1f      	ldr	r2, [pc, #124]	; (8008b84 <RCC_AHB1_PHERIPHERAL_ENABLE+0x118>)
 8008b06:	f043 0304 	orr.w	r3, r3, #4
 8008b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8008b0c:	60fb      	str	r3, [r7, #12]
			break;
 8008b0e:	e032      	b.n	8008b76 <RCC_AHB1_PHERIPHERAL_ENABLE+0x10a>

		case GPIOD_PERIPHERAL:
			RET = GPIOD_PERIPHERAL_ENABLE();
 8008b10:	4b1c      	ldr	r3, [pc, #112]	; (8008b84 <RCC_AHB1_PHERIPHERAL_ENABLE+0x118>)
 8008b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b14:	4a1b      	ldr	r2, [pc, #108]	; (8008b84 <RCC_AHB1_PHERIPHERAL_ENABLE+0x118>)
 8008b16:	f043 0308 	orr.w	r3, r3, #8
 8008b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8008b1c:	60fb      	str	r3, [r7, #12]
			break;
 8008b1e:	e02a      	b.n	8008b76 <RCC_AHB1_PHERIPHERAL_ENABLE+0x10a>

		case GPIOE_PERIPHERAL:
			RET = GPIOE_PERIPHERAL_ENABLE();
 8008b20:	4b18      	ldr	r3, [pc, #96]	; (8008b84 <RCC_AHB1_PHERIPHERAL_ENABLE+0x118>)
 8008b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b24:	4a17      	ldr	r2, [pc, #92]	; (8008b84 <RCC_AHB1_PHERIPHERAL_ENABLE+0x118>)
 8008b26:	f043 0310 	orr.w	r3, r3, #16
 8008b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8008b2c:	60fb      	str	r3, [r7, #12]
			break;
 8008b2e:	e022      	b.n	8008b76 <RCC_AHB1_PHERIPHERAL_ENABLE+0x10a>

		case GPIOH_PERIPHERAL:
			RET = GPIOH_PERIPHERAL_ENABLE();
 8008b30:	4b14      	ldr	r3, [pc, #80]	; (8008b84 <RCC_AHB1_PHERIPHERAL_ENABLE+0x118>)
 8008b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b34:	4a13      	ldr	r2, [pc, #76]	; (8008b84 <RCC_AHB1_PHERIPHERAL_ENABLE+0x118>)
 8008b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8008b3c:	60fb      	str	r3, [r7, #12]
			break;
 8008b3e:	e01a      	b.n	8008b76 <RCC_AHB1_PHERIPHERAL_ENABLE+0x10a>

		case CRC_PERIPHERAL:
			RET = CRC_PERIPHERAL_ENABLE();
 8008b40:	4b10      	ldr	r3, [pc, #64]	; (8008b84 <RCC_AHB1_PHERIPHERAL_ENABLE+0x118>)
 8008b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b44:	4a0f      	ldr	r2, [pc, #60]	; (8008b84 <RCC_AHB1_PHERIPHERAL_ENABLE+0x118>)
 8008b46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8008b4c:	60fb      	str	r3, [r7, #12]
			break;
 8008b4e:	e012      	b.n	8008b76 <RCC_AHB1_PHERIPHERAL_ENABLE+0x10a>

		case DMA1_PERIPHERAL:
			RET = DMA1_PERIPHERAL_ENABLE();
 8008b50:	4b0c      	ldr	r3, [pc, #48]	; (8008b84 <RCC_AHB1_PHERIPHERAL_ENABLE+0x118>)
 8008b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b54:	4a0b      	ldr	r2, [pc, #44]	; (8008b84 <RCC_AHB1_PHERIPHERAL_ENABLE+0x118>)
 8008b56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8008b5c:	60fb      	str	r3, [r7, #12]
			break;
 8008b5e:	e00a      	b.n	8008b76 <RCC_AHB1_PHERIPHERAL_ENABLE+0x10a>

		case DMA2_PERIPHERAL:
			RET = DMA2_PERIPHERAL_ENABLE();
 8008b60:	4b08      	ldr	r3, [pc, #32]	; (8008b84 <RCC_AHB1_PHERIPHERAL_ENABLE+0x118>)
 8008b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b64:	4a07      	ldr	r2, [pc, #28]	; (8008b84 <RCC_AHB1_PHERIPHERAL_ENABLE+0x118>)
 8008b66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8008b6c:	60fb      	str	r3, [r7, #12]
			break;
 8008b6e:	e002      	b.n	8008b76 <RCC_AHB1_PHERIPHERAL_ENABLE+0x10a>

		default:
			RET = E_NOK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	60fb      	str	r3, [r7, #12]
			break;
 8008b74:	bf00      	nop
	}

	return(RET);
 8008b76:	68fb      	ldr	r3, [r7, #12]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr
 8008b84:	40023800 	.word	0x40023800

08008b88 <RCC_AHB2_PHERIPHERAL_ENABLE>:

static STD_RETURN_TYPES RCC_AHB2_PHERIPHERAL_ENABLE(uint32 _PERIPHERAL)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
	STD_RETURN_TYPES RET = E_OK;
 8008b90:	2301      	movs	r3, #1
 8008b92:	60fb      	str	r3, [r7, #12]
	RET = OTGFS_PERIPHERAL_ENABLE();
 8008b94:	4b06      	ldr	r3, [pc, #24]	; (8008bb0 <RCC_AHB2_PHERIPHERAL_ENABLE+0x28>)
 8008b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b98:	4a05      	ldr	r2, [pc, #20]	; (8008bb0 <RCC_AHB2_PHERIPHERAL_ENABLE+0x28>)
 8008b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b9e:	6353      	str	r3, [r2, #52]	; 0x34
 8008ba0:	60fb      	str	r3, [r7, #12]
	return(RET);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	40023800 	.word	0x40023800

08008bb4 <RCC_APB1_PHERIPHERAL_ENABLE>:

static STD_RETURN_TYPES RCC_APB1_PHERIPHERAL_ENABLE(uint32 _PERIPHERAL)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
	STD_RETURN_TYPES RET = E_OK;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	60fb      	str	r3, [r7, #12]

	switch(_PERIPHERAL)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2b1c      	cmp	r3, #28
 8008bc4:	f200 809e 	bhi.w	8008d04 <RCC_APB1_PHERIPHERAL_ENABLE+0x150>
 8008bc8:	a201      	add	r2, pc, #4	; (adr r2, 8008bd0 <RCC_APB1_PHERIPHERAL_ENABLE+0x1c>)
 8008bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bce:	bf00      	nop
 8008bd0:	08008c45 	.word	0x08008c45
 8008bd4:	08008c55 	.word	0x08008c55
 8008bd8:	08008c65 	.word	0x08008c65
 8008bdc:	08008c75 	.word	0x08008c75
 8008be0:	08008d05 	.word	0x08008d05
 8008be4:	08008d05 	.word	0x08008d05
 8008be8:	08008d05 	.word	0x08008d05
 8008bec:	08008d05 	.word	0x08008d05
 8008bf0:	08008d05 	.word	0x08008d05
 8008bf4:	08008d05 	.word	0x08008d05
 8008bf8:	08008d05 	.word	0x08008d05
 8008bfc:	08008c85 	.word	0x08008c85
 8008c00:	08008d05 	.word	0x08008d05
 8008c04:	08008d05 	.word	0x08008d05
 8008c08:	08008c95 	.word	0x08008c95
 8008c0c:	08008ca5 	.word	0x08008ca5
 8008c10:	08008d05 	.word	0x08008d05
 8008c14:	08008cb5 	.word	0x08008cb5
 8008c18:	08008d05 	.word	0x08008d05
 8008c1c:	08008d05 	.word	0x08008d05
 8008c20:	08008d05 	.word	0x08008d05
 8008c24:	08008cc5 	.word	0x08008cc5
 8008c28:	08008cd5 	.word	0x08008cd5
 8008c2c:	08008ce5 	.word	0x08008ce5
 8008c30:	08008d05 	.word	0x08008d05
 8008c34:	08008d05 	.word	0x08008d05
 8008c38:	08008d05 	.word	0x08008d05
 8008c3c:	08008d05 	.word	0x08008d05
 8008c40:	08008cf5 	.word	0x08008cf5
	{
		case TIM2_PERIPHERAL:
			RET = TIM2_PERIPHERAL_ENABLE();
 8008c44:	4b34      	ldr	r3, [pc, #208]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c48:	4a33      	ldr	r2, [pc, #204]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008c4a:	f043 0301 	orr.w	r3, r3, #1
 8008c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8008c50:	60fb      	str	r3, [r7, #12]
			break;
 8008c52:	e05a      	b.n	8008d0a <RCC_APB1_PHERIPHERAL_ENABLE+0x156>

		case TIM3_PERIPHERAL:
			RET = TIM3_PERIPHERAL_ENABLE();
 8008c54:	4b30      	ldr	r3, [pc, #192]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c58:	4a2f      	ldr	r2, [pc, #188]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008c5a:	f043 0302 	orr.w	r3, r3, #2
 8008c5e:	6413      	str	r3, [r2, #64]	; 0x40
 8008c60:	60fb      	str	r3, [r7, #12]
			break;
 8008c62:	e052      	b.n	8008d0a <RCC_APB1_PHERIPHERAL_ENABLE+0x156>

		case TIM4_PERIPHERAL:
			RET = TIM4_PERIPHERAL_ENABLE();
 8008c64:	4b2c      	ldr	r3, [pc, #176]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c68:	4a2b      	ldr	r2, [pc, #172]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008c6a:	f043 0304 	orr.w	r3, r3, #4
 8008c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8008c70:	60fb      	str	r3, [r7, #12]
			break;
 8008c72:	e04a      	b.n	8008d0a <RCC_APB1_PHERIPHERAL_ENABLE+0x156>

		case TIM5_PERIPHERAL:
			RET = WWDG_PERIPHERAL_ENABLE();
 8008c74:	4b28      	ldr	r3, [pc, #160]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c78:	4a27      	ldr	r2, [pc, #156]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008c7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8008c80:	60fb      	str	r3, [r7, #12]
			break;
 8008c82:	e042      	b.n	8008d0a <RCC_APB1_PHERIPHERAL_ENABLE+0x156>

		case WWDG_PERIPHERAL:
			RET = TIM2_PERIPHERAL_ENABLE();
 8008c84:	4b24      	ldr	r3, [pc, #144]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c88:	4a23      	ldr	r2, [pc, #140]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008c8a:	f043 0301 	orr.w	r3, r3, #1
 8008c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8008c90:	60fb      	str	r3, [r7, #12]
			break;
 8008c92:	e03a      	b.n	8008d0a <RCC_APB1_PHERIPHERAL_ENABLE+0x156>

		case SPI2_PERIPHERAL:
			RET = SPI2_PERIPHERAL_ENABLE();
 8008c94:	4b20      	ldr	r3, [pc, #128]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c98:	4a1f      	ldr	r2, [pc, #124]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008c9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c9e:	6413      	str	r3, [r2, #64]	; 0x40
 8008ca0:	60fb      	str	r3, [r7, #12]
			break;
 8008ca2:	e032      	b.n	8008d0a <RCC_APB1_PHERIPHERAL_ENABLE+0x156>

		case SPI3_PERIPHERAL:
			RET = SPI3_PERIPHERAL_ENABLE();
 8008ca4:	4b1c      	ldr	r3, [pc, #112]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca8:	4a1b      	ldr	r2, [pc, #108]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cae:	6413      	str	r3, [r2, #64]	; 0x40
 8008cb0:	60fb      	str	r3, [r7, #12]
			break;
 8008cb2:	e02a      	b.n	8008d0a <RCC_APB1_PHERIPHERAL_ENABLE+0x156>

		case USART2_PERIPHERAL:
			RET = USART2_PERIPHERAL_ENABLE();
 8008cb4:	4b18      	ldr	r3, [pc, #96]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb8:	4a17      	ldr	r2, [pc, #92]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8008cc0:	60fb      	str	r3, [r7, #12]
			break;
 8008cc2:	e022      	b.n	8008d0a <RCC_APB1_PHERIPHERAL_ENABLE+0x156>

		case I2C1_PERIPHERAL:
			RET = I2C1_PERIPHERAL_ENABLE();
 8008cc4:	4b14      	ldr	r3, [pc, #80]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc8:	4a13      	ldr	r2, [pc, #76]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008cca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008cce:	6413      	str	r3, [r2, #64]	; 0x40
 8008cd0:	60fb      	str	r3, [r7, #12]
			break;
 8008cd2:	e01a      	b.n	8008d0a <RCC_APB1_PHERIPHERAL_ENABLE+0x156>

		case I2C2_PERIPHERAL:
			RET = I2C2_PERIPHERAL_ENABLE();
 8008cd4:	4b10      	ldr	r3, [pc, #64]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd8:	4a0f      	ldr	r2, [pc, #60]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008cda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008cde:	6413      	str	r3, [r2, #64]	; 0x40
 8008ce0:	60fb      	str	r3, [r7, #12]
			break;
 8008ce2:	e012      	b.n	8008d0a <RCC_APB1_PHERIPHERAL_ENABLE+0x156>

		case I2C3_PERIPHERAL:
			RET = I2C3_PERIPHERAL_ENABLE();
 8008ce4:	4b0c      	ldr	r3, [pc, #48]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce8:	4a0b      	ldr	r2, [pc, #44]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008cea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008cee:	6413      	str	r3, [r2, #64]	; 0x40
 8008cf0:	60fb      	str	r3, [r7, #12]
			break;
 8008cf2:	e00a      	b.n	8008d0a <RCC_APB1_PHERIPHERAL_ENABLE+0x156>

		case PWR_PERIPHERAL:
			RET = PWR_PERIPHERAL_ENABLE();
 8008cf4:	4b08      	ldr	r3, [pc, #32]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf8:	4a07      	ldr	r2, [pc, #28]	; (8008d18 <RCC_APB1_PHERIPHERAL_ENABLE+0x164>)
 8008cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8008d00:	60fb      	str	r3, [r7, #12]
			break;
 8008d02:	e002      	b.n	8008d0a <RCC_APB1_PHERIPHERAL_ENABLE+0x156>

		default:
			RET = E_NOK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	60fb      	str	r3, [r7, #12]
			break;
 8008d08:	bf00      	nop
	}
	return(RET);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr
 8008d18:	40023800 	.word	0x40023800

08008d1c <RCC_APB2_PHERIPHERAL_ENABLE>:

static STD_RETURN_TYPES RCC_APB2_PHERIPHERAL_ENABLE(uint32 _PERIPHERAL)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
	STD_RETURN_TYPES RET = E_OK;
 8008d24:	2301      	movs	r3, #1
 8008d26:	60fb      	str	r3, [r7, #12]

	switch(_PERIPHERAL)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b12      	cmp	r3, #18
 8008d2c:	f200 8082 	bhi.w	8008e34 <RCC_APB2_PHERIPHERAL_ENABLE+0x118>
 8008d30:	a201      	add	r2, pc, #4	; (adr r2, 8008d38 <RCC_APB2_PHERIPHERAL_ENABLE+0x1c>)
 8008d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d36:	bf00      	nop
 8008d38:	08008d85 	.word	0x08008d85
 8008d3c:	08008e35 	.word	0x08008e35
 8008d40:	08008e35 	.word	0x08008e35
 8008d44:	08008e35 	.word	0x08008e35
 8008d48:	08008d95 	.word	0x08008d95
 8008d4c:	08008da5 	.word	0x08008da5
 8008d50:	08008e35 	.word	0x08008e35
 8008d54:	08008e35 	.word	0x08008e35
 8008d58:	08008db5 	.word	0x08008db5
 8008d5c:	08008e35 	.word	0x08008e35
 8008d60:	08008e35 	.word	0x08008e35
 8008d64:	08008dc5 	.word	0x08008dc5
 8008d68:	08008dd5 	.word	0x08008dd5
 8008d6c:	08008de5 	.word	0x08008de5
 8008d70:	08008df5 	.word	0x08008df5
 8008d74:	08008e35 	.word	0x08008e35
 8008d78:	08008e05 	.word	0x08008e05
 8008d7c:	08008e15 	.word	0x08008e15
 8008d80:	08008e25 	.word	0x08008e25
	{
		case TIM1_PERIPHERAL:
			RET = TIM1_PERIPHERAL_ENABLE();
 8008d84:	4b30      	ldr	r3, [pc, #192]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d88:	4a2f      	ldr	r2, [pc, #188]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008d8a:	f043 0301 	orr.w	r3, r3, #1
 8008d8e:	6453      	str	r3, [r2, #68]	; 0x44
 8008d90:	60fb      	str	r3, [r7, #12]
			break;
 8008d92:	e052      	b.n	8008e3a <RCC_APB2_PHERIPHERAL_ENABLE+0x11e>

		case USART1_PERIPHERAL:
			RET = USART1_PERIPHERAL_ENABLE();
 8008d94:	4b2c      	ldr	r3, [pc, #176]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d98:	4a2b      	ldr	r2, [pc, #172]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008d9a:	f043 0310 	orr.w	r3, r3, #16
 8008d9e:	6453      	str	r3, [r2, #68]	; 0x44
 8008da0:	60fb      	str	r3, [r7, #12]
			break;
 8008da2:	e04a      	b.n	8008e3a <RCC_APB2_PHERIPHERAL_ENABLE+0x11e>

		case USART6_PERIPHERAL:
			RET = USART6_PERIPHERAL_ENABLE();
 8008da4:	4b28      	ldr	r3, [pc, #160]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008da8:	4a27      	ldr	r2, [pc, #156]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008daa:	f043 0320 	orr.w	r3, r3, #32
 8008dae:	6453      	str	r3, [r2, #68]	; 0x44
 8008db0:	60fb      	str	r3, [r7, #12]
			break;
 8008db2:	e042      	b.n	8008e3a <RCC_APB2_PHERIPHERAL_ENABLE+0x11e>

		case ADC1_PERIPHERAL:
			RET = ADC1_PERIPHERAL_ENABLE();
 8008db4:	4b24      	ldr	r3, [pc, #144]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008db8:	4a23      	ldr	r2, [pc, #140]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dbe:	6453      	str	r3, [r2, #68]	; 0x44
 8008dc0:	60fb      	str	r3, [r7, #12]
			break;
 8008dc2:	e03a      	b.n	8008e3a <RCC_APB2_PHERIPHERAL_ENABLE+0x11e>

		case SDIO_PERIPHERAL:
			RET = SDIO_PERIPHERAL_ENABLE();
 8008dc4:	4b20      	ldr	r3, [pc, #128]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dc8:	4a1f      	ldr	r2, [pc, #124]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008dca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008dce:	6453      	str	r3, [r2, #68]	; 0x44
 8008dd0:	60fb      	str	r3, [r7, #12]
			break;
 8008dd2:	e032      	b.n	8008e3a <RCC_APB2_PHERIPHERAL_ENABLE+0x11e>

		case SPI1_PERIPHERAL:
			RET = SPI1_PERIPHERAL_ENABLE();
 8008dd4:	4b1c      	ldr	r3, [pc, #112]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd8:	4a1b      	ldr	r2, [pc, #108]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008dda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008dde:	6453      	str	r3, [r2, #68]	; 0x44
 8008de0:	60fb      	str	r3, [r7, #12]
			break;
 8008de2:	e02a      	b.n	8008e3a <RCC_APB2_PHERIPHERAL_ENABLE+0x11e>

		case SPI4_PERIPHERAL:
			RET = SPI4_PERIPHERAL_ENABLE();
 8008de4:	4b18      	ldr	r3, [pc, #96]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008de8:	4a17      	ldr	r2, [pc, #92]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008dea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008dee:	6453      	str	r3, [r2, #68]	; 0x44
 8008df0:	60fb      	str	r3, [r7, #12]
			break;
 8008df2:	e022      	b.n	8008e3a <RCC_APB2_PHERIPHERAL_ENABLE+0x11e>

		case SYSCFG_PERIPHERAL:
			RET = SYSCFG_PERIPHERAL_ENABLE();
 8008df4:	4b14      	ldr	r3, [pc, #80]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008df8:	4a13      	ldr	r2, [pc, #76]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008dfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008dfe:	6453      	str	r3, [r2, #68]	; 0x44
 8008e00:	60fb      	str	r3, [r7, #12]
			break;
 8008e02:	e01a      	b.n	8008e3a <RCC_APB2_PHERIPHERAL_ENABLE+0x11e>

		case TIM9_PERIPHERAL:
			RET = TIM9_PERIPHERAL_ENABLE();
 8008e04:	4b10      	ldr	r3, [pc, #64]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e08:	4a0f      	ldr	r2, [pc, #60]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e0e:	6453      	str	r3, [r2, #68]	; 0x44
 8008e10:	60fb      	str	r3, [r7, #12]
			break;
 8008e12:	e012      	b.n	8008e3a <RCC_APB2_PHERIPHERAL_ENABLE+0x11e>

		case TIM10_PERIPHERAL:
			RET = TIM10_PERIPHERAL_ENABLE();
 8008e14:	4b0c      	ldr	r3, [pc, #48]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e18:	4a0b      	ldr	r2, [pc, #44]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e1e:	6453      	str	r3, [r2, #68]	; 0x44
 8008e20:	60fb      	str	r3, [r7, #12]
			break;
 8008e22:	e00a      	b.n	8008e3a <RCC_APB2_PHERIPHERAL_ENABLE+0x11e>

		case TIM11_PERIPHERAL:
			RET = TIM11_PERIPHERAL_ENABLE();
 8008e24:	4b08      	ldr	r3, [pc, #32]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e28:	4a07      	ldr	r2, [pc, #28]	; (8008e48 <RCC_APB2_PHERIPHERAL_ENABLE+0x12c>)
 8008e2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e2e:	6453      	str	r3, [r2, #68]	; 0x44
 8008e30:	60fb      	str	r3, [r7, #12]
			break;
 8008e32:	e002      	b.n	8008e3a <RCC_APB2_PHERIPHERAL_ENABLE+0x11e>

		default:
			RET = E_NOK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	60fb      	str	r3, [r7, #12]
			break;
 8008e38:	bf00      	nop
	}
	return(RET);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	40023800 	.word	0x40023800

08008e4c <RCC_HSI_INTIALIZE>:
	}
	return(RET);
}

static STD_RETURN_TYPES RCC_HSI_INTIALIZE(void)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
	STD_RETURN_TYPES RET = E_OK;
 8008e52:	2301      	movs	r3, #1
 8008e54:	607b      	str	r3, [r7, #4]
	  /*ENABLE HSI*/
		SET_BIT((RCC_REG-> RCC_CR),(RCC_CR_HSION));
 8008e56:	4b11      	ldr	r3, [pc, #68]	; (8008e9c <RCC_HSI_INTIALIZE+0x50>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a10      	ldr	r2, [pc, #64]	; (8008e9c <RCC_HSI_INTIALIZE+0x50>)
 8008e5c:	f043 0301 	orr.w	r3, r3, #1
 8008e60:	6013      	str	r3, [r2, #0]
		while(!READ_BIT((RCC_REG-> RCC_CR),RCC_CR_HSION_HSIRDY));
 8008e62:	bf00      	nop
 8008e64:	4b0d      	ldr	r3, [pc, #52]	; (8008e9c <RCC_HSI_INTIALIZE+0x50>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	085b      	lsrs	r3, r3, #1
 8008e6a:	4a0c      	ldr	r2, [pc, #48]	; (8008e9c <RCC_HSI_INTIALIZE+0x50>)
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d0f6      	beq.n	8008e64 <RCC_HSI_INTIALIZE+0x18>

	 /*SELECT SYSTEM CLOCK WITH HSI CLOCK*/
		(RCC_REG ->RCC_CFGR) &= ~(1<<SW_0);
 8008e76:	4b09      	ldr	r3, [pc, #36]	; (8008e9c <RCC_HSI_INTIALIZE+0x50>)
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	4a08      	ldr	r2, [pc, #32]	; (8008e9c <RCC_HSI_INTIALIZE+0x50>)
 8008e7c:	f023 0301 	bic.w	r3, r3, #1
 8008e80:	6093      	str	r3, [r2, #8]
		(RCC_REG ->RCC_CFGR) &= ~(1<<SW_1);
 8008e82:	4b06      	ldr	r3, [pc, #24]	; (8008e9c <RCC_HSI_INTIALIZE+0x50>)
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	4a05      	ldr	r2, [pc, #20]	; (8008e9c <RCC_HSI_INTIALIZE+0x50>)
 8008e88:	f023 0302 	bic.w	r3, r3, #2
 8008e8c:	6093      	str	r3, [r2, #8]

	return(RET);
 8008e8e:	687b      	ldr	r3, [r7, #4]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr
 8008e9c:	40023800 	.word	0x40023800

08008ea0 <SYSTICK_DE_INIT>:

	return(RET);
}

STD_RETURN_TYPES SYSTICK_DE_INIT(void)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
	STD_RETURN_TYPES RET = E_OK;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	607b      	str	r3, [r7, #4]

	/*DISABLE SYSTICK*/
	CLEAR_BIT((SYSTICK_REG ->STK_CTRL),SYSTICK_CTRL_ENABLE);
 8008eaa:	4b0c      	ldr	r3, [pc, #48]	; (8008edc <SYSTICK_DE_INIT+0x3c>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a0b      	ldr	r2, [pc, #44]	; (8008edc <SYSTICK_DE_INIT+0x3c>)
 8008eb0:	f023 0301 	bic.w	r3, r3, #1
 8008eb4:	6013      	str	r3, [r2, #0]
	/*RESET RELOAD REGISTER*/
	SYSTICK_REG ->STK_LOAD = (uint32)(0);
 8008eb6:	4b09      	ldr	r3, [pc, #36]	; (8008edc <SYSTICK_DE_INIT+0x3c>)
 8008eb8:	2200      	movs	r2, #0
 8008eba:	605a      	str	r2, [r3, #4]
	/*RESET VALUE REGISTER*/
	SYSTICK_REG ->STK_VAL = (uint32)(0);
 8008ebc:	4b07      	ldr	r3, [pc, #28]	; (8008edc <SYSTICK_DE_INIT+0x3c>)
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	609a      	str	r2, [r3, #8]
	/*DISABLE IRQ FOR SYSTICK*/
	CLEAR_BIT((SYSTICK_REG ->STK_CTRL),SYSTICK_CTRL_INT_ENABLE);
 8008ec2:	4b06      	ldr	r3, [pc, #24]	; (8008edc <SYSTICK_DE_INIT+0x3c>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a05      	ldr	r2, [pc, #20]	; (8008edc <SYSTICK_DE_INIT+0x3c>)
 8008ec8:	f023 0302 	bic.w	r3, r3, #2
 8008ecc:	6013      	str	r3, [r2, #0]

	return(RET);
 8008ece:	687b      	ldr	r3, [r7, #4]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	e000e010 	.word	0xe000e010

08008ee0 <SysTick_Handler>:

	return(RET);
}

void SysTick_Handler(void)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	af00      	add	r7, sp, #0
	if(SYS_option == SYS_SINGLE_TICK)
 8008ee4:	4b08      	ldr	r3, [pc, #32]	; (8008f08 <SysTick_Handler+0x28>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d101      	bne.n	8008ef0 <SysTick_Handler+0x10>
	{
		 SYSTICK_DE_INIT();
 8008eec:	f7ff ffd8 	bl	8008ea0 <SYSTICK_DE_INIT>
	}
	/* JUMP TO EXECUTE ISR*/
	SYS_CALLBACK();
 8008ef0:	4b06      	ldr	r3, [pc, #24]	; (8008f0c <SysTick_Handler+0x2c>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4798      	blx	r3

	/* RESET THE SYSTIC FLAG*/
	READ_BIT((SYSTICK_REG ->STK_CTRL),SYSTICK_CTRL_CONFG );
 8008ef6:	4b06      	ldr	r3, [pc, #24]	; (8008f10 <SysTick_Handler+0x30>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	0c1b      	lsrs	r3, r3, #16
 8008efc:	4a04      	ldr	r2, [pc, #16]	; (8008f10 <SysTick_Handler+0x30>)
 8008efe:	f003 0301 	and.w	r3, r3, #1
 8008f02:	6013      	str	r3, [r2, #0]
}
 8008f04:	bf00      	nop
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	200000c8 	.word	0x200000c8
 8008f0c:	2000010c 	.word	0x2000010c
 8008f10:	e000e010 	.word	0xe000e010

08008f14 <main>:
	.pull_type = NO_PULL,
};


int main(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	af00      	add	r7, sp, #0
   pin_intialize();
 8008f18:	f000 f81c 	bl	8008f54 <pin_intialize>



	for(;;)
	{
		RET = LED_TURN_ON(&LED1);
 8008f1c:	4809      	ldr	r0, [pc, #36]	; (8008f44 <main+0x30>)
 8008f1e:	f7ff f9dd 	bl	80082dc <LED_TURN_ON>
 8008f22:	4602      	mov	r2, r0
 8008f24:	4b08      	ldr	r3, [pc, #32]	; (8008f48 <main+0x34>)
 8008f26:	601a      	str	r2, [r3, #0]
		RET = LED_TURN_ON(&LED2);
 8008f28:	4808      	ldr	r0, [pc, #32]	; (8008f4c <main+0x38>)
 8008f2a:	f7ff f9d7 	bl	80082dc <LED_TURN_ON>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	4b05      	ldr	r3, [pc, #20]	; (8008f48 <main+0x34>)
 8008f32:	601a      	str	r2, [r3, #0]
		RET = BUZZER_TURN_ON(&BUZZER);
 8008f34:	4806      	ldr	r0, [pc, #24]	; (8008f50 <main+0x3c>)
 8008f36:	f7ff f984 	bl	8008242 <BUZZER_TURN_ON>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	4b02      	ldr	r3, [pc, #8]	; (8008f48 <main+0x34>)
 8008f3e:	601a      	str	r2, [r3, #0]
		RET = LED_TURN_ON(&LED1);
 8008f40:	e7ec      	b.n	8008f1c <main+0x8>
 8008f42:	bf00      	nop
 8008f44:	20000094 	.word	0x20000094
 8008f48:	20000090 	.word	0x20000090
 8008f4c:	2000009c 	.word	0x2000009c
 8008f50:	200000a4 	.word	0x200000a4

08008f54 <pin_intialize>:

	return(0);
}

void pin_intialize(void)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	af00      	add	r7, sp, #0
	RET= RCC_INTIALIZE();
 8008f58:	f7ff fd48 	bl	80089ec <RCC_INTIALIZE>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	4b0e      	ldr	r3, [pc, #56]	; (8008f98 <pin_intialize+0x44>)
 8008f60:	601a      	str	r2, [r3, #0]
	RET = RCC_PERIPHERAL_ENABLE(AHB1, GPIOA_PERIPHERAL);
 8008f62:	2100      	movs	r1, #0
 8008f64:	2000      	movs	r0, #0
 8008f66:	f7ff fd4f 	bl	8008a08 <RCC_PERIPHERAL_ENABLE>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	4b0a      	ldr	r3, [pc, #40]	; (8008f98 <pin_intialize+0x44>)
 8008f6e:	601a      	str	r2, [r3, #0]

	RET = LED_INTIALIZE(&LED1);
 8008f70:	480a      	ldr	r0, [pc, #40]	; (8008f9c <pin_intialize+0x48>)
 8008f72:	f7ff f97c 	bl	800826e <LED_INTIALIZE>
 8008f76:	4602      	mov	r2, r0
 8008f78:	4b07      	ldr	r3, [pc, #28]	; (8008f98 <pin_intialize+0x44>)
 8008f7a:	601a      	str	r2, [r3, #0]
	RET = LED_INTIALIZE(&LED2);
 8008f7c:	4808      	ldr	r0, [pc, #32]	; (8008fa0 <pin_intialize+0x4c>)
 8008f7e:	f7ff f976 	bl	800826e <LED_INTIALIZE>
 8008f82:	4602      	mov	r2, r0
 8008f84:	4b04      	ldr	r3, [pc, #16]	; (8008f98 <pin_intialize+0x44>)
 8008f86:	601a      	str	r2, [r3, #0]
    RET = BUZZER_INTIATIAZE(&BUZZER);
 8008f88:	4806      	ldr	r0, [pc, #24]	; (8008fa4 <pin_intialize+0x50>)
 8008f8a:	f7ff f923 	bl	80081d4 <BUZZER_INTIATIAZE>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	4b01      	ldr	r3, [pc, #4]	; (8008f98 <pin_intialize+0x44>)
 8008f92:	601a      	str	r2, [r3, #0]


}
 8008f94:	bf00      	nop
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	20000090 	.word	0x20000090
 8008f9c:	20000094 	.word	0x20000094
 8008fa0:	2000009c 	.word	0x2000009c
 8008fa4:	200000a4 	.word	0x200000a4

08008fa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008fa8:	480d      	ldr	r0, [pc, #52]	; (8008fe0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008faa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8008fac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008fb0:	480c      	ldr	r0, [pc, #48]	; (8008fe4 <LoopForever+0x6>)
  ldr r1, =_edata
 8008fb2:	490d      	ldr	r1, [pc, #52]	; (8008fe8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008fb4:	4a0d      	ldr	r2, [pc, #52]	; (8008fec <LoopForever+0xe>)
  movs r3, #0
 8008fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008fb8:	e002      	b.n	8008fc0 <LoopCopyDataInit>

08008fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008fbe:	3304      	adds	r3, #4

08008fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008fc4:	d3f9      	bcc.n	8008fba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008fc6:	4a0a      	ldr	r2, [pc, #40]	; (8008ff0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008fc8:	4c0a      	ldr	r4, [pc, #40]	; (8008ff4 <LoopForever+0x16>)
  movs r3, #0
 8008fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008fcc:	e001      	b.n	8008fd2 <LoopFillZerobss>

08008fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008fd0:	3204      	adds	r2, #4

08008fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008fd4:	d3fb      	bcc.n	8008fce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008fd6:	f000 f811 	bl	8008ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008fda:	f7ff ff9b 	bl	8008f14 <main>

08008fde <LoopForever>:

LoopForever:
    b LoopForever
 8008fde:	e7fe      	b.n	8008fde <LoopForever>
  ldr   r0, =_estack
 8008fe0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8008fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008fe8:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8008fec:	08009064 	.word	0x08009064
  ldr r2, =_sbss
 8008ff0:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8008ff4:	20000110 	.word	0x20000110

08008ff8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008ff8:	e7fe      	b.n	8008ff8 <ADC_IRQHandler>
	...

08008ffc <__libc_init_array>:
 8008ffc:	b570      	push	{r4, r5, r6, lr}
 8008ffe:	4e0d      	ldr	r6, [pc, #52]	; (8009034 <__libc_init_array+0x38>)
 8009000:	4c0d      	ldr	r4, [pc, #52]	; (8009038 <__libc_init_array+0x3c>)
 8009002:	1ba4      	subs	r4, r4, r6
 8009004:	10a4      	asrs	r4, r4, #2
 8009006:	2500      	movs	r5, #0
 8009008:	42a5      	cmp	r5, r4
 800900a:	d109      	bne.n	8009020 <__libc_init_array+0x24>
 800900c:	4e0b      	ldr	r6, [pc, #44]	; (800903c <__libc_init_array+0x40>)
 800900e:	4c0c      	ldr	r4, [pc, #48]	; (8009040 <__libc_init_array+0x44>)
 8009010:	f000 f818 	bl	8009044 <_init>
 8009014:	1ba4      	subs	r4, r4, r6
 8009016:	10a4      	asrs	r4, r4, #2
 8009018:	2500      	movs	r5, #0
 800901a:	42a5      	cmp	r5, r4
 800901c:	d105      	bne.n	800902a <__libc_init_array+0x2e>
 800901e:	bd70      	pop	{r4, r5, r6, pc}
 8009020:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009024:	4798      	blx	r3
 8009026:	3501      	adds	r5, #1
 8009028:	e7ee      	b.n	8009008 <__libc_init_array+0xc>
 800902a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800902e:	4798      	blx	r3
 8009030:	3501      	adds	r5, #1
 8009032:	e7f2      	b.n	800901a <__libc_init_array+0x1e>
 8009034:	0800905c 	.word	0x0800905c
 8009038:	0800905c 	.word	0x0800905c
 800903c:	0800905c 	.word	0x0800905c
 8009040:	08009060 	.word	0x08009060

08009044 <_init>:
 8009044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009046:	bf00      	nop
 8009048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904a:	bc08      	pop	{r3}
 800904c:	469e      	mov	lr, r3
 800904e:	4770      	bx	lr

08009050 <_fini>:
 8009050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009052:	bf00      	nop
 8009054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009056:	bc08      	pop	{r3}
 8009058:	469e      	mov	lr, r3
 800905a:	4770      	bx	lr
